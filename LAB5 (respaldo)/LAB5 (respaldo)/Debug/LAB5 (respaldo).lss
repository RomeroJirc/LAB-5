
LAB5 (respaldo).elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000208  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000194  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  00000208  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000208  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000238  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  00000278  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000708  00000000  00000000  000002b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000646  00000000  00000000  000009c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002c9  00000000  00000000  00001006  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000009c  00000000  00000000  000012d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000038c  00000000  00000000  0000136c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000ac  00000000  00000000  000016f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  000017a4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 95 00 	jmp	0x12a	; 0x12a <__vector_16>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 af 00 	jmp	0x15e	; 0x15e <__vector_21>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a1 30       	cpi	r26, 0x01	; 1
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 6c 00 	call	0xd8	; 0xd8 <main>
  88:	0c 94 c8 00 	jmp	0x190	; 0x190 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <initADC>:
	OCR1A =  ADCvalue/6;	
    }
}

void initADC(void){
	ADMUX = 0;
  90:	ec e7       	ldi	r30, 0x7C	; 124
  92:	f0 e0       	ldi	r31, 0x00	; 0
  94:	10 82       	st	Z, r1
	ADMUX |= (1<<REFS0);				//REFERENCIA AVCC = 5V
  96:	80 81       	ld	r24, Z
  98:	80 64       	ori	r24, 0x40	; 64
  9a:	80 83       	st	Z, r24
	ADMUX |= (1<<ADLAR);				//JUSTIFICACIÓN A LA IZQUIERDA
  9c:	80 81       	ld	r24, Z
  9e:	80 62       	ori	r24, 0x20	; 32
  a0:	80 83       	st	Z, r24
	ADMUX |= ((1<<MUX2) | (1<<MUX1));	//AL COLOCAR 0110 INDICAMOS EL ADC6 COMO EL RECEPTOR DE LA SEÑAL ANALÓGICA
  a2:	80 81       	ld	r24, Z
  a4:	86 60       	ori	r24, 0x06	; 6
  a6:	80 83       	st	Z, r24
	
	ADCSRA = 0;
  a8:	ea e7       	ldi	r30, 0x7A	; 122
  aa:	f0 e0       	ldi	r31, 0x00	; 0
  ac:	10 82       	st	Z, r1
	ADCSRA |= (1<<ADIE);				//HABILITaR INTERRUPCIONES DE ADC
  ae:	80 81       	ld	r24, Z
  b0:	88 60       	ori	r24, 0x08	; 8
  b2:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);	//PRESCALER DE 128 ----> 125kHz
  b4:	80 81       	ld	r24, Z
  b6:	87 60       	ori	r24, 0x07	; 7
  b8:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADEN);				//HABILITANDO EL ADC
  ba:	80 81       	ld	r24, Z
  bc:	80 68       	ori	r24, 0x80	; 128
  be:	80 83       	st	Z, r24
  c0:	08 95       	ret

000000c2 <initTimer0>:
	
}

void initTimer0(void){
	TCCR0B |= (1<<CS02)|(1<<CS00);;				//CONFIGURAR PRESCALER DE 1024
  c2:	85 b5       	in	r24, 0x25	; 37
  c4:	85 60       	ori	r24, 0x05	; 5
  c6:	85 bd       	out	0x25, r24	; 37
	TCNT0 = 255;								//CARGAR VALOR DE DESBORDAMIENTO
  c8:	8f ef       	ldi	r24, 0xFF	; 255
  ca:	86 bd       	out	0x26, r24	; 38
	TIMSK0 |= (1 << TOIE0);
  cc:	ee e6       	ldi	r30, 0x6E	; 110
  ce:	f0 e0       	ldi	r31, 0x00	; 0
  d0:	80 81       	ld	r24, Z
  d2:	81 60       	ori	r24, 0x01	; 1
  d4:	80 83       	st	Z, r24
  d6:	08 95       	ret

000000d8 <main>:
void initADC(void);
void initTimer0(void);

int main(void)
{
	cli();
  d8:	f8 94       	cli
    DDRB |= (1<<DDB1);	//PIN B1 COMO SALIDA
  da:	84 b1       	in	r24, 0x04	; 4
  dc:	82 60       	ori	r24, 0x02	; 2
  de:	84 b9       	out	0x04, r24	; 4
	TCCR1A = 0;
  e0:	a0 e8       	ldi	r26, 0x80	; 128
  e2:	b0 e0       	ldi	r27, 0x00	; 0
  e4:	1c 92       	st	X, r1
	TCCR1B = 0;
  e6:	e1 e8       	ldi	r30, 0x81	; 129
  e8:	f0 e0       	ldi	r31, 0x00	; 0
  ea:	10 82       	st	Z, r1
	
	TCCR1A |= (1<<COM1A1);				//OC1A NO INVERTIDO
  ec:	8c 91       	ld	r24, X
  ee:	80 68       	ori	r24, 0x80	; 128
  f0:	8c 93       	st	X, r24
	TCCR1A |= (1<<WGM10);				//MODO PWM FAST, 8 bits
  f2:	8c 91       	ld	r24, X
  f4:	81 60       	ori	r24, 0x01	; 1
  f6:	8c 93       	st	X, r24
	TCCR1B |= (1<<WGM12);
  f8:	80 81       	ld	r24, Z
  fa:	88 60       	ori	r24, 0x08	; 8
  fc:	80 83       	st	Z, r24
	
	TCCR1B |= (1<<CS12)|(1<<CS10);		//PRESCALER DE 1024
  fe:	80 81       	ld	r24, Z
 100:	85 60       	ori	r24, 0x05	; 5
 102:	80 83       	st	Z, r24
	
	initTimer0();						//LLAMAR A LA INICIALIZACIÓN DEL TIMER1
 104:	0e 94 61 00 	call	0xc2	; 0xc2 <initTimer0>
	initADC();							//LLAMAR A LA INICIALIZACIÓN DEL ADC
 108:	0e 94 48 00 	call	0x90	; 0x90 <initADC>
	
	sei();
 10c:	78 94       	sei
	
    while (1) 
    {
	OCR1A =  ADCvalue/6;	
 10e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 112:	9b ea       	ldi	r25, 0xAB	; 171
 114:	89 9f       	mul	r24, r25
 116:	81 2d       	mov	r24, r1
 118:	11 24       	eor	r1, r1
 11a:	86 95       	lsr	r24
 11c:	86 95       	lsr	r24
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 124:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 128:	f2 cf       	rjmp	.-28     	; 0x10e <main+0x36>

0000012a <__vector_16>:
	TCCR0B |= (1<<CS02)|(1<<CS00);;				//CONFIGURAR PRESCALER DE 1024
	TCNT0 = 255;								//CARGAR VALOR DE DESBORDAMIENTO
	TIMSK0 |= (1 << TOIE0);
}

ISR (TIMER0_OVF_vect){
 12a:	1f 92       	push	r1
 12c:	0f 92       	push	r0
 12e:	0f b6       	in	r0, 0x3f	; 63
 130:	0f 92       	push	r0
 132:	11 24       	eor	r1, r1
 134:	8f 93       	push	r24
 136:	ef 93       	push	r30
 138:	ff 93       	push	r31
	TCNT0 = 255;						//CARGAR VALOR DE DESBORDAMIENTO
 13a:	8f ef       	ldi	r24, 0xFF	; 255
 13c:	86 bd       	out	0x26, r24	; 38
	TIFR0 |= (1 << TOV0);				//APAGAR BANDERA DEL TIMER1
 13e:	85 b3       	in	r24, 0x15	; 21
 140:	81 60       	ori	r24, 0x01	; 1
 142:	85 bb       	out	0x15, r24	; 21
	ADCSRA |= (1<<ADSC);				//ADC START CONVERSION
 144:	ea e7       	ldi	r30, 0x7A	; 122
 146:	f0 e0       	ldi	r31, 0x00	; 0
 148:	80 81       	ld	r24, Z
 14a:	80 64       	ori	r24, 0x40	; 64
 14c:	80 83       	st	Z, r24
}
 14e:	ff 91       	pop	r31
 150:	ef 91       	pop	r30
 152:	8f 91       	pop	r24
 154:	0f 90       	pop	r0
 156:	0f be       	out	0x3f, r0	; 63
 158:	0f 90       	pop	r0
 15a:	1f 90       	pop	r1
 15c:	18 95       	reti

0000015e <__vector_21>:

ISR (ADC_vect){
 15e:	1f 92       	push	r1
 160:	0f 92       	push	r0
 162:	0f b6       	in	r0, 0x3f	; 63
 164:	0f 92       	push	r0
 166:	11 24       	eor	r1, r1
 168:	8f 93       	push	r24
 16a:	ef 93       	push	r30
 16c:	ff 93       	push	r31
	
	ADCvalue = ADCH;					//ACTUALIZAR VALOR DEL ADC
 16e:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 172:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	ADCSRA |= (1<<ADIF);				//APAGAR BANDERA DE INTERRUPCIÓN
 176:	ea e7       	ldi	r30, 0x7A	; 122
 178:	f0 e0       	ldi	r31, 0x00	; 0
 17a:	80 81       	ld	r24, Z
 17c:	80 61       	ori	r24, 0x10	; 16
 17e:	80 83       	st	Z, r24
 180:	ff 91       	pop	r31
 182:	ef 91       	pop	r30
 184:	8f 91       	pop	r24
 186:	0f 90       	pop	r0
 188:	0f be       	out	0x3f, r0	; 63
 18a:	0f 90       	pop	r0
 18c:	1f 90       	pop	r1
 18e:	18 95       	reti

00000190 <_exit>:
 190:	f8 94       	cli

00000192 <__stop_program>:
 192:	ff cf       	rjmp	.-2      	; 0x192 <__stop_program>
